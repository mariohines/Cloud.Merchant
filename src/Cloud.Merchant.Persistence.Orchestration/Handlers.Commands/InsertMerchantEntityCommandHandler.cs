using System;
using System.Threading;
using System.Threading.Tasks;
using Cloud.Merchant.Persistence.Abstractions;
using Cloud.Merchant.Persistence.Abstractions.Commands;
using Cloud.Merchant.Persistence.Abstractions.Context;
using Cloud.Merchant.Persistence.Core.Exceptions;
using Cloud.Merchant.Persistence.Orchestration.Extensions;
using Dapper;
using MediatR;
using Microsoft.Extensions.Logging;

namespace Cloud.Merchant.Persistence.Orchestration.Handlers.Commands
{
    public sealed class InsertMerchantEntityCommandHandler : IRequestHandler<InsertMerchantEntityCommand, Guid>
    {
        private readonly IDbContext _dbContext;
        private readonly ILogger<InsertMerchantEntityCommandHandler> _logger;

        public InsertMerchantEntityCommandHandler(IDbContext dbContext, ILogger<InsertMerchantEntityCommandHandler> logger) {
            _dbContext = dbContext;
            _logger = logger;
        }
        
        public async Task<Guid> Handle(InsertMerchantEntityCommand request, CancellationToken cancellationToken) {
            try {
                if (request.Data.Id > 0) throw new IncorrectEntityOperationException();
                var sql = $@"insert into merchant (Name, Description, CreateDate) values (@Name, @Description, {_dbContext.Provider.GetUtcDateSyntax()});
                            select PublicId from merchant where Id = {_dbContext.Provider.GetAutoGeneratedIdSyntax()};";
                var query = DbQuery.Create(sql, request.Data, token: cancellationToken);
                using var connection = _dbContext.CreateConnection();
                return await connection.ExecuteScalarAsync<Guid>(query.BuildCommandDefinition());
            }
            catch (IncorrectEntityOperationException e) {
                _logger.LogError(e, "An incorrect request has been made based on the data provided.");
                throw;
            }
            catch (Exception e) {
                _logger.LogError(e, "An unknown error has occurred.");
                throw;
            }
        }
    }
}